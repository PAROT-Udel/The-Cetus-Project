Start Cetus GUI with "-gui" as the first arg, e.g. "./cetus -gui" or "java -jar cetus.jar -gui".


*******************************************************************************
Options initialized implicitly before parsing command line: [-parser=cetus.base.grammars.CetusCParser, -induction=3, -outdir=cetus_output, -preprocessor=cpp -C -I., -privatize=2, -reduction=2, -verbosity=0, -ddt=2, -parallelize-loops=1, -ompGen=1, -alias=1, -range=1, -teliminate-branch=1, -profitable-omp=1]

[AnnotParser] begin
[AnnotParser] end in 0.02 seconds
[BranchEliminator] begin
[NormalizeReturn] begin
[NormalizeReturn] end in 0.01 seconds
[BranchEliminator] end in 0.17 seconds
[IVSubstitution] begin
[NormalizeReturn] begin
[NormalizeReturn] end in 0.00 seconds
[IVSubstitution] end in 0.06 seconds
[NormalizeReturn] begin
[NormalizeReturn] end in 0.00 seconds
[ArrayPrivatization] begin
[ArrayPrivatization] end in 0.06 seconds
[DDT] begin
[AliasAnalysis] begin
[AliasAnalysis] end in 0.00 seconds
parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (j=0; j<10000; j ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

[DDT] end in 0.19 seconds
[Reduction] begin
[Reduction] end in 0.00 seconds
[LoopInterchange] begin
# of Outermost Loop: 2
[LoopInterchange] end in 0.01 seconds
[LoopParallelization] begin

Cloning: 

[AliasAnalysis] begin
[NormalizeReturn] begin
[NormalizeReturn] end in 0.00 seconds
[AliasAnalysis] end in 0.01 seconds
parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}


Cloning: 

[AliasAnalysis] begin
[AliasAnalysis] end in 0.00 seconds
parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#0 
for (j=0; j<10000; j ++ )
{
#pragma cetus private(j) 
#pragma loop name main#0#0 
#pragma cetus parallel 
for (i=0; i<10000; i ++ )
{
b[j][(i+1)]=(2*b[j][(i-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

parallel loop: #pragma cetus private(i, j) 
#pragma loop name main#1 
for (i=0; i<10000; i ++ )
{
#pragma cetus private(j) 
#pragma loop name main#1#0 
for (j=0; j<10000; j ++ )
{
d[i][(j+1)]=(2*d[i][(j-1)]);
}
}

[ReductionTransform] begin
[ReductionTransform] end in 0.00 seconds
[LoopParallelization] end in 0.36 seconds
[ompGen] begin
[ProfitableOMP] begin
[ProfitableOMP] end
[ompGen] end
[Tools] Indentation process was successful for file: cetus_output/LoopInterchange.c
You have the latest Cetus of version 1.4.4.
